#!/usr/bin/env python
"""
List cubes in a file.

The file must be in a format that can be read by iris.

"""
# Copyright (c) 2013 Andrew Dawson
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
from __future__ import print_function
import os
import sys
import warnings
from argparse import ArgumentParser, RawDescriptionHelpFormatter

import iris


__version__ = '1.0.0'


class Error(Exception):
    pass


def _print_cubes(filename, names=None, summary_only=False):
    try:
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')
            cubes = iris.load(filename, names)
    except IOError, e:
        raise Error("cannot read data from file: '{!s}'".format(filename))
    namestr = ''
    if names is not None:
        namestr = ' [only:{:s}]'.format(','.join(names))
    summary = '{!s} contains {:d} cubes{!s}:'.format(filename, len(cubes),
                                                     namestr)
    print(summary)
    print('-' * len(summary))
    print(cubes)
    if not summary_only:
        for cube in cubes:
            print()
            print(cube)


def main(argv=None):
    if argv is None:
        argv = sys.argv
    ap = ArgumentParser(prog=os.path.basename(argv[0]),
                        description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
    ap.add_argument('-s', '--summary-only', action='store_true', default=False,
                    help='only print the summary of cubes')
    ap.add_argument('-n', '--name', nargs='+',
                    help='only print cubes with the given name(s)')
    ap.add_argument('file', nargs=1,
                    help='file containing cubes')
    args = ap.parse_args(argv[1:])
    try:
        _print_cubes(args.file[0], args.name, args.summary_only)
    except Error, e:
        print('error: {!s}'.format(e), file=sys.stderr)
        print('use -h or --help for help', file=sys.stderr)
        return 1
    else:
        return 0


if __name__ == '__main__':
    sys.exit(main())
